1.write a c program Reverse a string using stack?
#include <stdio.h>  
#include <string.h>  
#define max 25  
int up,stack[max];  
void push(char h){  
      // Push(Inserting Element in stack) operation  
      if(up == max-1)
      {  
          printf("stack overflow");  
      } 
      else
      {  
          stack[up++]=h;  
      }  
  
}  
  
void pop()
{  
    // Pop (Removing element from stack)  
      printf("%c",stack[up--]);  
}  
  
  
main()  
{  
   char str[]="nagalakshmi";  
   int len = strlen(str);  
   int i;  
  
   for(i=0;i<len;i++)  
        push(str[i]);  
  
   for(i=0;i<len;i++)  
      pop();  
}
 
2.write a c program for Infix to postfix conversion using stack?
#include<stdio.h>
#include<ctype.h>
char stack[25];
int up = -1;
void push(char h)
{
    stack[up++] = h;
}
char pop()
{
    if(up == -1)
        return -1;
    else
        return stack[up--];
}
int priority(char h)
{
    if(h == '(')
        return 0;
    if(h == '+' || h == '-')
        return 1;
    if(h == '*' || h == '/')
        return 2;
}
main()
{
    char exp[25];
    char *e, h;
    printf("Enter the expression :: ");
    scanf("%s",exp);
    e = exp;
    while(*e != '\0')
    {
        if(isalnum(*e))
            printf("%c",*e);
        else if(*e == '(')
            push(*e);
        else if(*e == ')')
        {
            while((h = pop()) != '(')
                printf("%c", h);
        }
        else
        {
            while(priority(stack[up]) >= priority(*e))
                printf("%c",pop());
            push(*e);
        }
        e++;
    }
    while(up != -1)
    {
        printf("%c",pop());
    }
}

3.write a c proam to Implement queue using two stacks?
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

struct Stack {
    int data;
    struct Stack *next;
};


struct Stack *CreateStack () 
{
    return NULL;
}

int isEmptyStack(struct Stack *up) 
{
    return (up == NULL);
}

void Push(struct Stack **up, int data) {
    struct Stack *newNode = (struct Stack*) malloc(sizeof(struct Stack));
    if(!newNode)
        return;
    newNode->data = data;
    newNode->next = *up;
    *up = newNode;
}

int Pop(struct Stack **up) {
    struct Stack *temp;
    int data;

    if(isEmptyStack(*up)) {
        printf("Empty Stack.\n");
        return INT_MIN;
    }

    temp = *up;
    data = (*up)->data;
    *up = (*up)->next;
    free(temp);
    return data;
}

struct Queue {
    struct Stack *S1;
    struct Stack *S2;
};

struct Queue *CreateQueue() {
    return NULL;
}

void EnQueue(struct Queue *Q, int data) {
    Push(Q->S1, data);
}

int DeQueue(struct Queue *Q) {
    if(!isEmptyStack(Q->S2)) {
        return Pop(Q->S2);
    }
    else {
        while(!isEmptyStack(Q->S1)) {
            Push(Q->S2, Pop(Q->S1));
        }
        return Pop(Q->S2);
    }
}

int main() {
    struct Queue *Q = CreateQueue();
    Q->S1 = Q->S2 = NULL;
    EnQueue(Q, 1);
    EnQueue(Q, 2);
    EnQueue(Q, 3);

    printf("%d ", DeQueue(Q));
    printf("%d ", DeQueue(Q));
    printf("%d ", DeQueue(Q));

    return 0;
}

4.write a c program for Insertion and deletion using BST?
#include<stdio.h> 
#include<stdlib.h> 
struct node 
{ 
    int key; 
    struct node *left, *right; 
}; 
// A utility function to create a new BST node 
struct node *newNode(int item) 
{ 
    struct node *temp =  (struct node *)malloc(sizeof(struct node)); 
    temp->key = item; 
    temp->left = temp->right = NULL; 
    return temp; 
} 
// A utility function to do inorder traversal of BST 
void inorder(struct node *root) 
{ 
    if (root != NULL) 
    { 
        inorder(root->left); 
        printf("%d ", root->key); 
        inorder(root->right); 
    } 
} 
/* A utility function to insert a new node with given key in BST */
struct node* insert(struct node* node, int key) 
{ 
    if (node == NULL) return newNode(key); 
    if (key < node->key) 
        node->left  = insert(node->left, key); 
    else
        node->right = insert(node->right, key); 
     return node; 
} 
struct node * minValueNode(struct node* node) 
{ 
    struct node* current = node; 
    /* loop down to find the leftmost leaf */
    while (current && current->left != NULL) 
        current = current->left; 
    return current; 
} 
/* Given a binary search tree and a key, this function deletes the key 
   and returns the new root */
struct node* deleteNode(struct node* root, int key) 
{ 
    // base case 
   if (root == NULL) return root; 
    // If the key to be deleted is smaller than the root's key, 
    // then it lies in left subtree 
    if (key < root->key) 
        root->left = deleteNode(root->left, key); 
    // If the key to be deleted is greater than the root's key, 
    // then it lies in right subtree 
    else if (key > root->key) 
        root->right = deleteNode(root->right, key); 
    // if key is same as root's key, then This is the node 
    // to be deleted 
    else
    { 
        // node with only one child or no child 
        if (root->left == NULL) 
        { 
            struct node *temp = root->right; 
            free(root); 
            return temp; 
        } 
        else if (root->right == NULL) 
        { 
            struct node *temp = root->left; 
            free(root); 
            return temp; 
        } 
        // node with two children: Get the inorder successor (smallest 
        // in the right subtree) 
        struct node* temp = minValueNode(root->right); 
        // Copy the inorder successor's content to this node 
        root->key = temp->key; 
        // Delete the inorder successor 
        root->right = deleteNode(root->right, temp->key); 
    } 
    return root; 
} 
int main() 
{ 
    struct node *root = NULL; 
    root = insert(root, 55); 
    root = insert(root, 35); 
    root = insert(root, 25); 
    root = insert(root, 45); 
    root = insert(root, 75); 
    root = insert(root, 65); 
    root = insert(root, 85); 
    printf("Inorder traversal of the given tree \n"); 
    inorder(root); 
    printf("\nDelete 25\n"); 
    root = deleteNode(root, 25); 
    printf("Inorder traversal of the modified tree \n"); 
    inorder(root); 
    printf("\nDelete 35\n"); 
    root = deleteNode(root, 35); 
    printf("Inorder traversal of the modified tree \n"); 
    inorder(root); 
    printf("\nDelete 55\n"); 
    root = deleteNode(root, 55); 
    printf("Inorder traversal of the modified tree \n"); 
    inorder(root); 
    return 0; 
}
